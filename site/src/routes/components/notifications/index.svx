# Notifications

This is a straightforward Notification component consisting of two parts:

- a shared notification queue
- a wrapper for the actual notification

## The queue

The queue is a readonly svelte store that exposes two additional functions:
- *pop* removes the first item on the queue
- *push* adds an item to the end of the queue

```js
import { notifications } from 'renderless-svelte'

notifications.push("Something happened")
```

## The notification component

This component reacts to elements being added a queue and can be initialized with a timer to specify how long a notification should stay visible.

- _payload_ will be the current item from the queue, this can be any kind of object, allowing for great flexibility in how the notifications will look like.
- _duration_ determines how long a notification should remain visible, default is 1000 (corresponding to one second)
- _on:notify_ fires if a new notification is being sent, `event.detail` will hold the same payload as _payload_

```svelte
<script>
    import { Notification } from 'renderless-svelte'
</script>

<Notification let:payload duration="200">
    <span>{payload}</span>
</Notification>
```

## Animations

Considering the notification is renderless it does not come with any animations out of the box, but using `svelte/transition` this becomes trivial to add.

```svelte
<Notification let:payload on:notify="{ev => console.log(ev.detail)}">
    <span in:fly={{ duration: 500, y: 300}}>{payload}</span>
</Notification>
```
